<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用Hexo+GitHub Pages 搭建博客]]></title>
      <url>http://yoursite.com/2016/10/24/%E4%BD%BF%E7%94%A8Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E9%9D%99%E5%8D%9A%E5%AE%A2/</url>
      <content type="text"><![CDATA[1. node.js安装安装 Node.js 的最佳方式是使用 nvm。 cURL: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 $ nvm install stable 2. Hexo安装Node和Git都安装好后,首先创建一个文件夹,如blog,用户存放hexo的配置文件,然后进入blog里安装Hexo。 执行如下命令安装Hexo： sudo npm install -g hexo 初始化然后，执行init命令初始化hexo,命令： hexo init 好啦，至此，全部安装工作已经完成！blog就是你的博客根目录，所有的操作都在里面进行。 生成静态页面 hexo generate（hexo g也可以） 本地启动 启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000 建立Repository 建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联，我的blog在本地/Users/leopard/blog，blog是我之前建的东西也全在这里面，有： _config.yml node_modules public source db.json package.json scaffolds themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml 翻到最下面，改成我这样子的 deploy: type: git repo: https://github.com/leopardpan/leopardpan.github.io.git branch: master 然后执行命令： npm install hexo-deployer-git --save 然后，执行配置命令： hexo deploy 然后再浏览器中输入http://leopardpan.github.io/就行了，我的github的账户叫leopardpan,把这个改成你github的账户名就行了 部署步骤 每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令： hexo new&quot;postName&quot; #新建文章 hexo new page&quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 3.主题及插件安装使用next主题，详细配置：http://theme-next.iissnan.com/getting-started.html 去掉底部Power By Hexo/由 Hexo 强力驱动准备工具Hexo一个主题 (我使用的是 Hacker )Editer (我使用的是 VS Code )步骤用文本编辑器打开 Hexo 所在的目录打开 themes 目录打开你想要编辑的主题所在的目录中的 layout 目录打开 layout 目录下的 _partial 目录打开 _partial 目录下的 footer.ejs 文件将下面这段代码修改成你想要的Powered by &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt; Theme by &lt;a href=&quot;https://github.com/CodeDaraW/Hacker&quot; target=&quot;_blank&quot;&gt;Hacker&lt;/a&gt; Website of &lt;a href=&quot;https://itdevwu.github.io&quot; target=&quot;_blank&quot;&gt;itdevwu&lt;/a&gt; 和平时一样 Save，然后 Deploy查看你的 Hexo 首页，发现已经将“ Powered By ” 改成你想要的了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Gradle管理与构建]]></title>
      <url>http://yoursite.com/2016/10/24/Gradle%E5%B8%B8%E7%94%A8/</url>
      <content type="text"><![CDATA[##1. 自定义Gradle打包方式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657apply plugin: &apos;java&apos;sourceCompatibility = 1.7targetCompatibility = 1.7version = &apos;1.0&apos;repositories &#123; mavenCentral() mavenLocal()&#125;dependencies &#123; //json 及相关依赖 compile(&apos;net.sf.json-lib:json-lib:2.4:jdk15@jar&apos;) compile(&apos;commons-beanutils:commons-beanutils:1.8.0&apos;) compile(&apos;commons-collections:commons-collections:3.2.1&apos;) compile(&apos;commons-lang:commons-lang:2.5&apos;) compile(&apos;commons-logging:commons-logging:1.1.1&apos;) compile(&apos;net.sf.ezmorph:ezmorph:1.0.6&apos;)// testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.11&apos;&#125;task taskJar(type:Jar, dependsOn: compileJava) &#123; from &apos;build/classes&apos; destinationDir = file(&apos;build/libs&apos;)&#125;task clearPj(type:Delete)&#123; delete &apos;build&apos;,&apos;target&apos;&#125;task release(type: Copy,dependsOn: [clearPj,taskJar]) &#123; from(&apos;build/libs&apos;) &#123; include &apos;*.jar&apos; &#125; into (&apos;target&apos;)&#125;jar &#123; manifest &#123; attributes (&apos;Main-Class&apos;: &apos; wsn.um.common.Main&apos;) &#125; baseName = &quot;wsn.um.open_jdk1.7&quot; version = &quot;0.0.1&quot; from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125; exclude &apos;META-INF/*.RSA&apos;, &apos;META-INF/*.SF&apos;,&apos;META-INF/*.DSA&apos;&#125; ##2. Gradle中获取当前时间 12345678jar &#123; baseName = &apos;HairDressing&apos; version = releaseTime()&#125;def releaseTime() &#123; return new Date().format(&quot;yyyy-MM-dd_HH-mm-ss&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))&#125; ##3. SpringBoot gradle 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374buildscript &#123; repositories &#123; mavenLocal() mavenCentral() maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125; maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125; &#125; dependencies &#123; classpath(&quot;org.springframework.boot:spring-boot-gradle-plugin:1.4.0.BUILD-SNAPSHOT&quot;) &#125;&#125;apply plugin: &apos;java&apos;apply plugin: &apos;spring-boot&apos;//apply plugin: &apos;war&apos;repositories &#123; mavenLocal() mavenCentral() maven &#123; url &quot;http://repo.spring.io/snapshot&quot; &#125; maven &#123; url &quot;http://repo.spring.io/milestone&quot; &#125; maven &#123; url &quot;http://jcenter.bintray.com&quot; &#125;&#125;jar &#123; baseName = &apos;HairDressing&apos; version = releaseTime()&#125;dependencies &#123; //spring-boot ref compile(&quot;org.springframework.boot:spring-boot-starter-web:1.4.0.BUILD-SNAPSHOT&quot;) compile(&quot;org.springframework.boot:spring-boot-starter-data-jpa:1.4.0.BUILD-SNAPSHOT&quot;) //mysql ref compile(&quot;mysql:mysql-connector-java:5.1.35&quot;) //json ref compile(&apos;net.sf.json-lib:json-lib:2.4:jdk15@jar&apos;) compile(&apos;commons-beanutils:commons-beanutils:1.8.0&apos;) compile(&apos;commons-collections:commons-collections:3.2.1&apos;) compile(&apos;commons-lang:commons-lang:2.5&apos;) compile(&apos;commons-logging:commons-logging:1.1.1&apos;) compile(&apos;net.sf.ezmorph:ezmorph:1.0.6&apos;) //geometry compile(&apos;com.vividsolutions:jts:1.13&apos;) //freemarker ref compile(&apos;org.springframework.boot:spring-boot-starter-freemarker:1.4.0.BUILD-SNAPSHOT&apos;) //jdom compile(&apos;jdom:jdom:1.0&apos;) //ping++ compile &apos;Pingplusplus:pingpp-java:2.0.7&apos; //json compile(&apos;org.json:org.json:chargebee-1.0&apos;)// testCompile(&quot;org.springframework.boot:spring-boot-starter-test&quot;)&#125;task wrapper(type: Wrapper)&#123; gradleVersion = &apos;2.2.1&apos;&#125;def releaseTime() &#123; return new Date().format(&quot;yyyy-MM-dd_HH-mm-ss&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/10/24/hello-world/</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
